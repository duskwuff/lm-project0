/*
 * romlib.h
 *
 * Prototypes for functions in TI's ROM-based driverlib.
 *
 * Copyright (c) 2012 Dusk Wuff (dusk@woofle.net).
 *
 * To the extent possible under law, the author has dedicated all copyright and
 * related and neighboring rights to this software to the public domain
 * worldwide. This software is distributed without any warranty.
 */

#ifndef _ROMLIB_H
#define _ROMLIB_H

#define _ROMLIB_BASE ((intptr_t **)0x01000010)
#define _ROMCALL(ret, t1, t2, args...) ((ret (*)(args))(_ROMLIB_BASE[t1][t2]))

/* UART functions */
#define UARTCharPut _ROMCALL(void, 1, 0, uint32_t base, uint8_t data)
#define UARTParityModeSet _ROMCALL(void, 1, 1, uint32_t base, uint32_t parity)
#define UARTParityModeGet _ROMCALL(uint32_t, 1, 2, uint32_t base)
#define UARTFIFOLevelSet _ROMCALL(void, 1, 3, uint32_t base, uint32_t txLevel, uint32_t rxLevel)
#define UARTFIFOLevelGet _ROMCALL(void, 1, 4, uint32_t base, uint32_t *txLevel, uint32_t *rxLevel)
#define UARTConfigSetExpClk _ROMCALL(void, 1, 5, uint32_t base, uint32_t uartClk, uint32_t baud, uint32_t config)
#define UARTConfigGetExpClk _ROMCALL(void, 1, 6, uint32_t base, uint32_t uartClk, uint32_t *baud, uint32_t *config)
#define UARTEnable _ROMCALL(void, 1, 7, uint32_t base)
#define UARTDisable _ROMCALL(void, 1, 8, uint32_t base)
#define UARTEnableSIR _ROMCALL(void, 1, 9, uint32_t base, bool lowPower)
#define UARTDisableSIR _ROMCALL(void, 1, 10, uint32_t base)
#define UARTCharsAvail _ROMCALL(bool, 1, 11, uint32_t base)
#define UARTSpaceAvail _ROMCALL(bool, 1, 12, uint32_t base)
#define UARTCharGetNonBlocking _ROMCALL(long, 1, 13, uint32_t base)
#define UARTCharGet _ROMCALL(long, 1, 14, uint32_t base)
#define UARTCharPutNonBlocking _ROMCALL(bool, 1, 15, uint32_t base, uint8_t data)
#define UARTBreakCtl _ROMCALL(void, 1, 16, uint32_t base, bool breakState)
#define UARTIntEnable _ROMCALL(void, 1, 17, uint32_t base, uint32_t flags)
#define UARTIntDisable _ROMCALL(void, 1, 18, uint32_t base, uint32_t flags)
#define UARTIntStatus _ROMCALL(uint32_t, 1, 19, uint32_t base, bool masked)
#define UARTIntClear _ROMCALL(void, 1, 20, uint32_t base, uint32_t flags)
#define UARTUpdateUART _ROMCALL(void, 1, 21, void)
#define UARTDMAEnable _ROMCALL(void, 1, 22, uint32_t base, uint32_t flags)
#define UARTDMADisable _ROMCALL(void, 1, 23, uint32_t base, uint32_t flags)
#define UARTFIFOEnable _ROMCALL(void, 1, 24, uint32_t base)
#define UARTFIFODisable _ROMCALL(void, 1, 25, uint32_t base)
#define UARTBusy _ROMCALL(bool, 1, 26, uint32_t base)
#define UARTTxIntModeSet _ROMCALL(void, 1, 27, uint32_t base, uint32_t mode)
#define UARTTxIntModeGet _ROMCALL(uint32_t, 1, 28, uint32_t base)
#define UARTRxErrorGet _ROMCALL(uint32_t, 1, 29, uint32_t base)
#define UARTRxErrorClear _ROMCALL(void, 1, 30, uint32_t base)
#define UARTClockSourceSet _ROMCALL(void, 1, 31, uint32_t base, uint32_t source)
#define UARTClockSourceGet _ROMCALL(uint32_t, 1, 32, uint32_t base)
#define UART9BitEnable _ROMCALL(void, 1, 33, uint32_t base)
#define UART9BitDisable _ROMCALL(void, 1, 34, uint32_t base)
#define UART9BitAddrSet _ROMCALL(void, 1, 35, uint32_t base, uint8_t addr, uint8_t mask)
#define UART9BitAddrSend _ROMCALL(void, 1, 36, uint32_t base, uint8_t addr)

/* SSI functions */
#define SSIDataPut _ROMCALL(void, 2, 0, uint32_t base, uint32_t data)
#define SSIConfigSetExpClk _ROMCALL(void, 2, 1, uint32_t base, uint32_t clk, uint32_t protocol, uint32_t mode, uint32_t bitRate, uint32_t dataWidth)
#define SSIEnable _ROMCALL(void, 2, 2, uint32_t base)
#define SSIDisable _ROMCALL(void, 2, 3, uint32_t base)
#define SSIIntEnable _ROMCALL(void, 2, 4, uint32_t base, uint32_t flags)
#define SSIIntDisable _ROMCALL(void, 2, 5, uint32_t base, uint32_t flags)
#define SSIIntStatus _ROMCALL(uint32_t, 2, 6, uint32_t base, bool masked)
#define SSIIntClear _ROMCALL(void, 2, 7, uint32_t base, uint32_t flags)
#define SSIDataPutNonBlocking _ROMCALL(long, 2, 8, uint32_t base, uint32_t data)
#define SSIDataGet _ROMCALL(void, 2, 9, uint32_t base, uint32_t *data)
#define SSIDataGetNonBlocking _ROMCALL(long, 2, 10, uint32_t base, uint32_t *data)
#define SSIUpdateSSI _ROMCALL(void, 2, 11, void)
#define SSIDMAEnable _ROMCALL(void, 2, 12, uint32_t base, uint32_t flags)
#define SSIDMADisable _ROMCALL(void, 2, 13, uint32_t base, uint32_t flags)
#define SSIBusy _ROMCALL(bool, 2, 14, uint32_t base)
#define SSIClockSourceGet _ROMCALL(uint32_t, 2, 15, uint32_t base)
#define SSIClockSourceSet _ROMCALL(void, 2, 16, uint32_t base, uint32_t source)

/* I2C functions */
#define I2CMasterDataPut _ROMCALL(void, 3, 0, uint32_t base, uint8_t data)
#define I2CMasterInitExpClk _ROMCALL(void, 3, 1, uint32_t base, uint32_t clk, bool fast)
#define I2CSlaveInit _ROMCALL(void, 3, 2, uint32_t base, uint8_t slaveAddr)
#define I2CMasterEnable _ROMCALL(void, 3, 3, uint32_t base)
#define I2CSlaveEnable _ROMCALL(void, 3, 4, uint32_t base)
#define I2CMasterDisable _ROMCALL(void, 3, 5, uint32_t base)
#define I2CSlaveDisable _ROMCALL(void, 3, 6, uint32_t base)
#define I2CMasterIntEnable _ROMCALL(void, 3, 7, uint32_t base)
#define I2CSlaveIntEnable _ROMCALL(void, 3, 8, uint32_t base)
#define I2CMasterIntDisable _ROMCALL(void, 3, 9, uint32_t base)
#define I2CSlaveIntDisable _ROMCALL(void, 3, 10, uint32_t base)
#define I2CMasterIntStatus _ROMCALL(bool, 3, 11, uint32_t base, bool masked)
#define I2CSlaveIntStatus _ROMCALL(bool, 3, 12, uint32_t base, bool masked)
#define I2CMasterIntClear _ROMCALL(void, 3, 13, uint32_t base)
#define I2CSlaveIntClear _ROMCALL(void, 3, 14, uint32_t base)
#define I2CMasterSlaveAddrSet _ROMCALL(void, 3, 15, uint32_t base, uint8_t slaveAddr, bool receive)
#define I2CMasterBusy _ROMCALL(bool, 3, 16, uint32_t base)
#define I2CMasterBusBusy _ROMCALL(bool, 3, 17, uint32_t base)
#define I2CMasterControl _ROMCALL(void, 3, 18, uint32_t base, uint32_t cmd)
#define I2CMasterErr _ROMCALL(uint32_t, 3, 19, uint32_t base)
#define I2CMasterDataGet _ROMCALL(uint32_t, 3, 20, uint32_t base)
#define I2CSlaveStatus _ROMCALL(uint32_t, 3, 21, uint32_t base)
#define I2CSlaveDataPut _ROMCALL(void, 3, 22, uint32_t base, uint8_t data)
#define I2CSlaveDataGet _ROMCALL(uint32_t, 3, 23, uint32_t base)
#define I2CUpdateI2C _ROMCALL(void, 3, 24, void)
#define I2CSlaveIntEnableEx _ROMCALL(void, 3, 25, uint32_t base, uint32_t flags)
#define I2CSlaveIntDisableEx _ROMCALL(void, 3, 26, uint32_t base, uint32_t flags)
#define I2CSlaveIntStatusEx _ROMCALL(uint32_t, 3, 27, uint32_t base, bool masked)
#define I2CSlaveIntClearEx _ROMCALL(void, 3, 28, uint32_t base, uint32_t flags)
#define I2CMasterIntEnableEx _ROMCALL(void, 3, 29, uint32_t base, uint32_t flags)
#define I2CMasterIntDisableEx _ROMCALL(void, 3, 30, uint32_t base, uint32_t flags)
#define I2CMasterIntStatusEx _ROMCALL(uint32_t, 3, 31, uint32_t base, bool masked)
#define I2CMasterIntClearEx _ROMCALL(void, 3, 32, uint32_t base, uint32_t flags)
#define I2CMasterTimeoutSet _ROMCALL(void, 3, 33, uint32_t base, uint32_t value)
#define I2CSlaveACKOverride _ROMCALL(void, 3, 34, uint32_t base, bool enable)
#define I2CSlaveACKValueSet _ROMCALL(void, 3, 35, uint32_t base, bool ack)
#define I2CSlaveAddressSet _ROMCALL(void, 3, 37, uint32_t base, uint8_t addrNum, uint8_t slaveAddr)
#define I2CMasterLineStateGet _ROMCALL(uint32_t, 3, 38, uint32_t base)

/* GPIO functions */
#define GPIOPinWrite _ROMCALL(void, 4, 0, uint32_t port, uint8_t pins, uint8_t val)
#define GPIODirModeSet _ROMCALL(void, 4, 1, uint32_t port, uint8_t pins, uint32_t pinIO)
#define GPIODirModeGet _ROMCALL(uint32_t, 4, 2, uint32_t port, uint8_t pin)
#define GPIOIntTypeSet _ROMCALL(void, 4, 3, uint32_t port, uint8_t pins, uint32_t intType)
#define GPIOIntTypeGet _ROMCALL(uint32_t, 4, 4, uint32_t port, uint8_t pin)
#define GPIOPadConfigSet _ROMCALL(void, 4, 5, uint32_t port, uint8_t pins, uint32_t Trength, uint32_t padType)
#define GPIOPadConfigGet _ROMCALL(void, 4, 6, uint32_t port, uint8_t pin, uint32_t *strength, uint32_t *padType)
#define GPIOPinIntEnable _ROMCALL(void, 4, 7, uint32_t port, uint8_t pins)
#define GPIOPinIntDisable _ROMCALL(void, 4, 8, uint32_t port, uint8_t pins)
#define GPIOPinIntStatus _ROMCALL(long, 4, 9, uint32_t port, bool masked)
#define GPIOPinIntClear _ROMCALL(void, 4, 10, uint32_t port, uint8_t pins)
#define GPIOPinRead _ROMCALL(long, 4, 11, uint32_t port, uint8_t pins)
#define GPIOPinTypeCAN _ROMCALL(void, 4, 12, uint32_t port, uint8_t pins)
#define GPIOPinTypeComparator _ROMCALL(void, 4, 13, uint32_t port, uint8_t pins)
#define GPIOPinTypeGPIOInput _ROMCALL(void, 4, 14, uint32_t port, uint8_t pins)
#define GPIOPinTypeGPIOOutput _ROMCALL(void, 4, 15, uint32_t port, uint8_t pins)
#define GPIOPinTypeI2C _ROMCALL(void, 4, 16, uint32_t port, uint8_t pins)
#define GPIOPinTypePWM _ROMCALL(void, 4, 17, uint32_t port, uint8_t pins)
#define GPIOPinTypeQEI _ROMCALL(void, 4, 18, uint32_t port, uint8_t pins)
#define GPIOPinTypeSSI _ROMCALL(void, 4, 19, uint32_t port, uint8_t pins)
#define GPIOPinTypeTimer _ROMCALL(void, 4, 20, uint32_t port, uint8_t pins)
#define GPIOPinTypeUART _ROMCALL(void, 4, 21, uint32_t port, uint8_t pins)
#define GPIOPinTypeGPIOOutputOD _ROMCALL(void, 4, 22, uint32_t port, uint8_t pins)
#define GPIOPinTypeADC _ROMCALL(void, 4, 23, uint32_t port, uint8_t pins)
#define GPIOPinTypeUSBDigital _ROMCALL(void, 4, 24, uint32_t port, uint8_t pins)
#define GPIOPinTypeI2S _ROMCALL(void, 4, 25, uint32_t port, uint8_t pins)
#define GPIOPinConfigure _ROMCALL(void, 4, 26, uint32_t config)
#define GPIOPinTypeEthernetLED _ROMCALL(void, 4, 27, uint32_t port, uint8_t pins)
#define GPIOPinTypeUSBAnalog _ROMCALL(void, 4, 28, uint32_t port, uint8_t pins)
#define GPIOPinTypeEPI _ROMCALL(void, 4, 29, uint32_t port, uint8_t pins)
#define GPIOPinTypeEthernetMII _ROMCALL(void, 4, 30, uint32_t port, uint8_t pins)
#define GPIODMATriggerEnable _ROMCALL(void, 4, 31, uint32_t port, uint8_t pins)
#define GPIODMATriggerDisable _ROMCALL(void, 4, 32, uint32_t port, uint8_t pins)
#define GPIOADCTriggerEnable _ROMCALL(void, 4, 33, uint32_t port, uint8_t pins)
#define GPIOADCTriggerDisable _ROMCALL(void, 4, 34, uint32_t port, uint8_t pins)
#define GPIOPinTypeFan _ROMCALL(void, 4, 35, uint32_t port, uint8_t pins)
#define GPIOPinTypeLPC _ROMCALL(void, 4, 36, uint32_t port, uint8_t pins)
#define GPIOPinTypePECIRx _ROMCALL(void, 4, 37, uint32_t port, uint8_t pins)
#define GPIOPinTypePECITx _ROMCALL(void, 4, 38, uint32_t port, uint8_t pins)
#define GPIOPinTypeI2CSCL _ROMCALL(void, 4, 39, uint32_t port, uint8_t pins)

/* ADC functions */
#define ADCSequenceDataGet _ROMCALL(long, 5, 0, uint32_t base, uint32_t seq, uint32_t *buffer)
#define ADCIntDisable _ROMCALL(void, 5, 1, uint32_t base, uint32_t seq)
#define ADCIntEnable _ROMCALL(void, 5, 2, uint32_t base, uint32_t seq)
#define ADCIntStatus _ROMCALL(uint32_t, 5, 3, uint32_t base, uint32_t seq, bool masked)
#define ADCIntClear _ROMCALL(void, 5, 4, uint32_t base, uint32_t seq)
#define ADCSequenceEnable _ROMCALL(void, 5, 5, uint32_t base, uint32_t seq)
#define ADCSequenceDisable _ROMCALL(void, 5, 6, uint32_t base, uint32_t seq)
#define ADCSequenceConfigure _ROMCALL(void, 5, 7, uint32_t base, uint32_t seq, uint32_t trigger, uint32_t priority)
#define ADCSequenceStepConfigure _ROMCALL(void, 5, 8, uint32_t base, uint32_t seq, uint32_t step, uint32_t config)
#define ADCSequenceOverflow _ROMCALL(long, 5, 9, uint32_t base, uint32_t seq)
#define ADCSequenceOverflowClear _ROMCALL(void, 5, 10, uint32_t base, uint32_t seq)
#define ADCSequenceUnderflow _ROMCALL(long, 5, 11, uint32_t base, uint32_t seq)
#define ADCSequenceUnderflowClear _ROMCALL(void, 5, 12, uint32_t base, uint32_t seq)
#define ADCProcessorTrigger _ROMCALL(void, 5, 13, uint32_t base, uint32_t seq)
#define ADCHardwareOversampleConfigure _ROMCALL(void, 5, 14, uint32_t base, uint32_t factor)
#define ADCComparatorConfigure _ROMCALL(void, 5, 15, uint32_t base, uint32_t comp, uint32_t config)
#define ADCComparatorRegionSet _ROMCALL(void, 5, 16, uint32_t base, uint32_t comp, uint32_t lowRef, uint32_t highRef)
#define ADCComparatorReset _ROMCALL(void, 5, 17, uint32_t base, uint32_t comp, bool trigger, bool interrupt)
#define ADCComparatorIntDisable _ROMCALL(void, 5, 18, uint32_t base, uint32_t seq)
#define ADCComparatorIntEnable _ROMCALL(void, 5, 19, uint32_t base, uint32_t seq)
#define ADCComparatorIntStatus _ROMCALL(uint32_t, 5, 20, uint32_t base)
#define ADCComparatorIntClear _ROMCALL(void, 5, 21, uint32_t base, uint32_t status)
#define ADCReferenceSet _ROMCALL(void, 5, 22, uint32_t base, uint32_t ref)
#define ADCReferenceGet _ROMCALL(uint32_t, 5, 23, uint32_t base)
#define ADCPhaseDelaySet _ROMCALL(void, 5, 24, uint32_t base, uint32_t phase)
#define ADCPhaseDelayGet _ROMCALL(uint32_t, 5, 25, uint32_t base)
#define ADCResolutionSet _ROMCALL(void, 5, 26, uint32_t base, uint32_t resolution)
#define ADCResolutionGet _ROMCALL(uint32_t, 5, 27, uint32_t base)

/* Comparator functions */
#define ComparatorIntClear _ROMCALL(void, 6, 0, uint32_t base, uint32_t comp)
#define ComparatorConfigure _ROMCALL(void, 6, 1, uint32_t base, uint32_t comp, uint32_t config)
#define ComparatorRefSet _ROMCALL(void, 6, 2, uint32_t base, uint32_t ref)
#define ComparatorValueGet _ROMCALL(bool, 6, 3, uint32_t base, uint32_t comp)
#define ComparatorIntEnable _ROMCALL(void, 6, 4, uint32_t base, uint32_t comp)
#define ComparatorIntDisable _ROMCALL(void, 6, 5, uint32_t base, uint32_t comp)
#define ComparatorIntStatus _ROMCALL(bool, 6, 6, uint32_t base, uint32_t comp, bool masked)

/* Flash functions */
#define FlashProgram _ROMCALL(long, 7, 0, uint32_t *data, uint32_t address, uint32_t count)
#define FlashUsecGet _ROMCALL(uint32_t, 7, 1, void)
#define FlashUsecSet _ROMCALL(void, 7, 2, uint32_t clocks)
#define FlashErase _ROMCALL(long, 7, 3, uint32_t address)
#define FlashProtectGet _ROMCALL(tFlashProtection, 7, 4, uint32_t address)
#define FlashProtectSet _ROMCALL(long, 7, 5, uint32_t address, tFlashProtection eProtect)
#define FlashProtectSave _ROMCALL(long, 7, 6, void)
#define FlashUserGet _ROMCALL(long, 7, 7, uint32_t *user0, uint32_t *user1)
#define FlashUserSet _ROMCALL(long, 7, 8, uint32_t user0, uint32_t user1)
#define FlashUserSave _ROMCALL(long, 7, 9, void)
#define FlashIntEnable _ROMCALL(void, 7, 10, uint32_t flags)
#define FlashIntDisable _ROMCALL(void, 7, 11, uint32_t flags)
#define FlashIntStatus _ROMCALL(uint32_t, 7, 12, bool masked)
#define FlashIntClear _ROMCALL(void, 7, 13, uint32_t flags)

/* PWM functions */
#define PWMPulseWidthSet _ROMCALL(void, 8, 0, uint32_t base, uint32_t pwmOut, uint32_t width)
#define PWMGenConfigure _ROMCALL(void, 8, 1, uint32_t base, uint32_t gen, uint32_t config)
#define PWMGenPeriodSet _ROMCALL(void, 8, 2, uint32_t base, uint32_t gen, uint32_t period)
#define PWMGenPeriodGet _ROMCALL(uint32_t, 8, 3, uint32_t base, uint32_t gen)
#define PWMGenEnable _ROMCALL(void, 8, 4, uint32_t base, uint32_t gen)
#define PWMGenDisable _ROMCALL(void, 8, 5, uint32_t base, uint32_t gen)
#define PWMPulseWidthGet _ROMCALL(uint32_t, 8, 6, uint32_t base, uint32_t pwmOut)
#define PWMDeadBandEnable _ROMCALL(void, 8, 7, uint32_t base, uint32_t gen, uint16_t usRise, uint16_t usFall)
#define PWMDeadBandDisable _ROMCALL(void, 8, 8, uint32_t base, uint32_t gen)
#define PWMSyncUpdate _ROMCALL(void, 8, 9, uint32_t base, uint32_t genBits)
#define PWMSyncTimeBase _ROMCALL(void, 8, 10, uint32_t base, uint32_t genBits)
#define PWMOutputState _ROMCALL(void, 8, 11, uint32_t base, uint32_t pwmOutBits, bool enable)
#define PWMOutputInvert _ROMCALL(void, 8, 12, uint32_t base, uint32_t pwmOutBits, bool invert)
#define PWMOutputFault _ROMCALL(void, 8, 13, uint32_t base, uint32_t pwmOutBits, bool faultSuppress)
#define PWMGenIntTrigEnable _ROMCALL(void, 8, 14, uint32_t base, uint32_t gen, uint32_t intTrig)
#define PWMGenIntTrigDisable _ROMCALL(void, 8, 15, uint32_t base, uint32_t gen, uint32_t intTrig)
#define PWMGenIntStatus _ROMCALL(uint32_t, 8, 16, uint32_t base, uint32_t gen, bool masked)
#define PWMGenIntClear _ROMCALL(void, 8, 17, uint32_t base, uint32_t gen, uint32_t ints)
#define PWMIntEnable _ROMCALL(void, 8, 18, uint32_t base, uint32_t genFault)
#define PWMIntDisable _ROMCALL(void, 8, 19, uint32_t base, uint32_t genFault)
#define PWMFaultIntClear _ROMCALL(void, 8, 20, uint32_t base)
#define PWMIntStatus _ROMCALL(uint32_t, 8, 21, uint32_t base, bool masked)
#define PWMOutputFaultLevel _ROMCALL(void, 8, 22, uint32_t base, uint32_t pwmOutBits, bool driveHigh)
#define PWMFaultIntClearExt _ROMCALL(void, 8, 23, uint32_t base, uint32_t faultInts)
#define PWMGenFaultConfigure _ROMCALL(void, 8, 24, uint32_t base, uint32_t gen, uint32_t minFaultPeriod, uint32_t faultSenses)
#define PWMGenFaultTriggerSet _ROMCALL(void, 8, 25, uint32_t base, uint32_t gen, uint32_t group, uint32_t faultTriggers)
#define PWMGenFaultTriggerGet _ROMCALL(uint32_t, 8, 26, uint32_t base, uint32_t gen, uint32_t group)
#define PWMGenFaultStatus _ROMCALL(uint32_t, 8, 27, uint32_t base, uint32_t gen, uint32_t group)
#define PWMGenFaultClear _ROMCALL(void, 8, 28, uint32_t base, uint32_t gen, uint32_t group, uint32_t faultTriggers)

/* QEI functions */
#define QEIPositionGet _ROMCALL(uint32_t, 9, 0, uint32_t base)
#define QEIEnable _ROMCALL(void, 9, 1, uint32_t base)
#define QEIDisable _ROMCALL(void, 9, 2, uint32_t base)
#define QEIConfigure _ROMCALL(void, 9, 3, uint32_t base, uint32_t config, uint32_t maxPosition)
#define QEIPositionSet _ROMCALL(void, 9, 4, uint32_t base, uint32_t position)
#define QEIDirectionGet _ROMCALL(long, 9, 5, uint32_t base)
#define QEIErrorGet _ROMCALL(bool, 9, 6, uint32_t base)
#define QEIVelocityEnable _ROMCALL(void, 9, 7, uint32_t base)
#define QEIVelocityDisable _ROMCALL(void, 9, 8, uint32_t base)
#define QEIVelocityConfigure _ROMCALL(void, 9, 9, uint32_t base, uint32_t preDiv, uint32_t period)
#define QEIVelocityGet _ROMCALL(uint32_t, 9, 10, uint32_t base)
#define QEIIntEnable _ROMCALL(void, 9, 11, uint32_t base, uint32_t flags)
#define QEIIntDisable _ROMCALL(void, 9, 12, uint32_t base, uint32_t flags)
#define QEIIntStatus _ROMCALL(uint32_t, 9, 13, uint32_t base, bool masked)
#define QEIIntClear _ROMCALL(void, 9, 14, uint32_t base, uint32_t flags)

/* SysTick functions */
#define SysTickValueGet _ROMCALL(uint32_t, 10, 0, void)
#define SysTickEnable _ROMCALL(void, 10, 1, void)
#define SysTickDisable _ROMCALL(void, 10, 2, void)
#define SysTickIntEnable _ROMCALL(void, 10, 3, void)
#define SysTickIntDisable _ROMCALL(void, 10, 4, void)
#define SysTickPeriodSet _ROMCALL(void, 10, 5, uint32_t period)
#define SysTickPeriodGet _ROMCALL(uint32_t, 10, 6, void)

/* Timer functions */
#define TimerIntClear _ROMCALL(void, 11, 0, uint32_t base, uint32_t flags)
#define TimerEnable _ROMCALL(void, 11, 1, uint32_t base, uint32_t timer)
#define TimerDisable _ROMCALL(void, 11, 2, uint32_t base, uint32_t timer)
#define TimerConfigure _ROMCALL(void, 11, 3, uint32_t base, uint32_t config)
#define TimerControlLevel _ROMCALL(void, 11, 4, uint32_t base, uint32_t timer, bool invert)
#define TimerControlTrigger _ROMCALL(void, 11, 5, uint32_t base, uint32_t timer, bool enable)
#define TimerControlEvent _ROMCALL(void, 11, 6, uint32_t base, uint32_t timer, uint32_t event)
#define TimerControlStall _ROMCALL(void, 11, 7, uint32_t base, uint32_t timer, bool stall)
#define TimerRTCEnable _ROMCALL(void, 11, 8, uint32_t base)
#define TimerRTCDisable _ROMCALL(void, 11, 9, uint32_t base)
#define TimerPrescaleSet _ROMCALL(void, 11, 10, uint32_t base, uint32_t timer, uint32_t value)
#define TimerPrescaleGet _ROMCALL(uint32_t, 11, 11, uint32_t base, uint32_t timer)
#define TimerPrescaleMatchSet _ROMCALL(void, 11, 12, uint32_t base, uint32_t timer, uint32_t value)
#define TimerPrescaleMatchGet _ROMCALL(uint32_t, 11, 13, uint32_t base, uint32_t timer)
#define TimerLoadSet _ROMCALL(void, 11, 14, uint32_t base, uint32_t timer, uint32_t value)
#define TimerLoadGet _ROMCALL(uint32_t, 11, 15, uint32_t base, uint32_t timer)
#define TimerValueGet _ROMCALL(uint32_t, 11, 16, uint32_t base, uint32_t timer)
#define TimerMatchSet _ROMCALL(void, 11, 17, uint32_t base, uint32_t timer, uint32_t value)
#define TimerMatchGet _ROMCALL(uint32_t, 11, 18, uint32_t base, uint32_t timer)
#define TimerIntEnable _ROMCALL(void, 11, 19, uint32_t base, uint32_t flags)
#define TimerIntDisable _ROMCALL(void, 11, 20, uint32_t base, uint32_t flags)
#define TimerIntStatus _ROMCALL(uint32_t, 11, 21, uint32_t base, bool masked)
#define TimerControlWaitOnTrigger _ROMCALL(void, 11, 22, uint32_t base, uint32_t timer, bool wait)
#define TimerLoadSet64 _ROMCALL(void, 11, 23, uint32_t base, uint64_t value)
#define TimerLoadGet64 _ROMCALL(uint64_t, 11, 24, uint32_t base)
#define TimerValueGet64 _ROMCALL(uint64_t, 11, 25, uint32_t base)
#define TimerMatchSet64 _ROMCALL(void, 11, 26, uint32_t base, uint64_t value)
#define TimerMatchGet64 _ROMCALL(uint64_t, 11, 27, uint32_t base)

/* Watchdog functions */
#define WatchdogIntClear _ROMCALL(void, 12, 0, uint32_t base)
#define WatchdogRunning _ROMCALL(bool, 12, 1, uint32_t base)
#define WatchdogEnable _ROMCALL(void, 12, 2, uint32_t base)
#define WatchdogResetEnable _ROMCALL(void, 12, 3, uint32_t base)
#define WatchdogResetDisable _ROMCALL(void, 12, 4, uint32_t base)
#define WatchdogLock _ROMCALL(void, 12, 5, uint32_t base)
#define WatchdogUnlock _ROMCALL(void, 12, 6, uint32_t base)
#define WatchdogLockState _ROMCALL(bool, 12, 7, uint32_t base)
#define WatchdogReloadSet _ROMCALL(void, 12, 8, uint32_t base, uint32_t loadVal)
#define WatchdogReloadGet _ROMCALL(uint32_t, 12, 9, uint32_t base)
#define WatchdogValueGet _ROMCALL(uint32_t, 12, 10, uint32_t base)
#define WatchdogIntEnable _ROMCALL(void, 12, 11, uint32_t base)
#define WatchdogIntStatus _ROMCALL(uint32_t, 12, 12, uint32_t base, bool masked)
#define WatchdogStallEnable _ROMCALL(void, 12, 13, uint32_t base)
#define WatchdogStallDisable _ROMCALL(void, 12, 14, uint32_t base)
#define WatchdogIntTypeSet _ROMCALL(void, 12, 15, uint32_t base, uint32_t type)

/* SysCtl functions */
#define SysCtlSleep _ROMCALL(void, 13, 0, void)
#define SysCtlSRAMSizeGet _ROMCALL(uint32_t, 13, 1, void)
#define SysCtlFlashSizeGet _ROMCALL(uint32_t, 13, 2, void)
#define SysCtlPinPresent _ROMCALL(bool, 13, 3, uint32_t pin)
#define SysCtlPeripheralPresent _ROMCALL(bool, 13, 4, uint32_t peripheral)
#define SysCtlPeripheralReset _ROMCALL(void, 13, 5, uint32_t peripheral)
#define SysCtlPeripheralEnable _ROMCALL(void, 13, 6, uint32_t peripheral)
#define SysCtlPeripheralDisable _ROMCALL(void, 13, 7, uint32_t peripheral)
#define SysCtlPeripheralSleepEnable _ROMCALL(void, 13, 8, uint32_t peripheral)
#define SysCtlPeripheralSleepDisable _ROMCALL(void, 13, 9, uint32_t peripheral)
#define SysCtlPeripheralDeepSleepEnable _ROMCALL(void, 13, 10, uint32_t peripheral)
#define SysCtlPeripheralDeepSleepDisable _ROMCALL(void, 13, 11, uint32_t peripheral)
#define SysCtlPeripheralClockGating _ROMCALL(void, 13, 12, bool enable)
#define SysCtlIntEnable _ROMCALL(void, 13, 13, uint32_t ints)
#define SysCtlIntDisable _ROMCALL(void, 13, 14, uint32_t ints)
#define SysCtlIntClear _ROMCALL(void, 13, 15, uint32_t ints)
#define SysCtlIntStatus _ROMCALL(uint32_t, 13, 16, bool masked)
#define SysCtlLDOSet _ROMCALL(void, 13, 17, uint32_t voltage)
#define SysCtlLDOGet _ROMCALL(uint32_t, 13, 18, void)
#define SysCtlReset _ROMCALL(void, 13, 19, void)
#define SysCtlDeepSleep _ROMCALL(void, 13, 20, void)
#define SysCtlResetCauseGet _ROMCALL(uint32_t, 13, 21, void)
#define SysCtlResetCauseClear _ROMCALL(void, 13, 22, uint32_t causes)
#define SysCtlClockSet _ROMCALL(void, 13, 23, uint32_t config)
#define SysCtlClockGet _ROMCALL(uint32_t, 13, 24, void)
#define SysCtlPWMClockSet _ROMCALL(void, 13, 25, uint32_t config)
#define SysCtlPWMClockGet _ROMCALL(uint32_t, 13, 26, void)
#define SysCtlADCSpeedSet _ROMCALL(void, 13, 27, uint32_t speed)
#define SysCtlADCSpeedGet _ROMCALL(uint32_t, 13, 28, void)
#define SysCtlGPIOAHBEnable _ROMCALL(void, 13, 29, uint32_t peripheral)
#define SysCtlGPIOAHBDisable _ROMCALL(void, 13, 30, uint32_t peripheral)
#define SysCtlUSBPLLEnable _ROMCALL(void, 13, 31, void)
#define SysCtlUSBPLLDisable _ROMCALL(void, 13, 32, void)
#define SysCtlI2SMClkSet _ROMCALL(uint32_t, 13, 33, uint32_t inputClock, uint32_t mClk)
#define SysCtlDelay _ROMCALL(void, 13, 34, uint32_t count)
#define SysCtlPeripheralReady _ROMCALL(bool, 13, 35, uint32_t peripheral)
#define SysCtlPeripheralPowerOn _ROMCALL(void, 13, 36, uint32_t peripheral)
#define SysCtlPeripheralPowerOff _ROMCALL(void, 13, 37, uint32_t peripheral)
#define SysCtlMOSCConfigSet _ROMCALL(void, 13, 44, uint32_t config)
#define SysCtlPIOSCCalibrate _ROMCALL(uint32_t, 13, 45, uint32_t type)
#define SysCtlDeepSleepClockSet _ROMCALL(void, 13, 46, uint32_t config)

/* Int functions */
#define IntEnable _ROMCALL(void, 14, 0, uint32_t interrupt)
#define IntMasterEnable _ROMCALL(bool, 14, 1, void)
#define IntMasterDisable _ROMCALL(bool, 14, 2, void)
#define IntDisable _ROMCALL(void, 14, 3, uint32_t interrupt)
#define IntPriorityGroupingSet _ROMCALL(void, 14, 4, uint32_t bits)
#define IntPriorityGroupingGet _ROMCALL(uint32_t, 14, 5, void)
#define IntPrioritySet _ROMCALL(void, 14, 6, uint32_t interrupt, uint8_t priority)
#define IntPriorityGet _ROMCALL(long, 14, 7, uint32_t interrupt)
#define IntPendSet _ROMCALL(void, 14, 8, uint32_t interrupt)
#define IntPendClear _ROMCALL(void, 14, 9, uint32_t interrupt)
#define IntPriorityMaskSet _ROMCALL(void, 14, 10, uint32_t priorityMask)
#define IntPriorityMaskGet _ROMCALL(uint32_t, 14, 11, void)

/* Ethernet functions */
#define EthernetIntClear _ROMCALL(void, 15, 0, uint32_t base, uint32_t flags)
#define EthernetInitExpClk _ROMCALL(void, 15, 1, uint32_t base, uint32_t ethClk)
#define EthernetConfigSet _ROMCALL(void, 15, 2, uint32_t base, uint32_t config)
#define EthernetConfigGet _ROMCALL(uint32_t, 15, 3, uint32_t base)
#define EthernetMACAddrSet _ROMCALL(void, 15, 4, uint32_t base, uint8_t *addr)
#define EthernetMACAddrGet _ROMCALL(void, 15, 5, uint32_t base, uint8_t *addr)
#define EthernetEnable _ROMCALL(void, 15, 6, uint32_t base)
#define EthernetDisable _ROMCALL(void, 15, 7, uint32_t base)
#define EthernetPacketAvail _ROMCALL(bool, 15, 8, uint32_t base)
#define EthernetSpaceAvail _ROMCALL(bool, 15, 9, uint32_t base)
#define EthernetPacketGetNonBlocking _ROMCALL(long, 15, 10, uint32_t base, uint8_t *buf, long len)
#define EthernetPacketGet _ROMCALL(long, 15, 11, uint32_t base, uint8_t *buf, long len)
#define EthernetPacketPutNonBlocking _ROMCALL(long, 15, 12, uint32_t base, uint8_t *buf, long len)
#define EthernetPacketPut _ROMCALL(long, 15, 13, uint32_t base, uint8_t *buf, long len)
#define EthernetIntEnable _ROMCALL(void, 15, 14, uint32_t base, uint32_t flags)
#define EthernetIntDisable _ROMCALL(void, 15, 15, uint32_t base, uint32_t flags)
#define EthernetIntStatus _ROMCALL(uint32_t, 15, 16, uint32_t base, bool masked)
#define EthernetPHYWrite _ROMCALL(void, 15, 17, uint32_t base, uint8_t regAddr, uint32_t data)
#define EthernetPHYRead _ROMCALL(uint32_t, 15, 18, uint32_t base, uint8_t regAddr)
#define EthernetUpdateEthernet _ROMCALL(void, 15, 19, uint32_t clock)
#define EthernetPHYAddrSet _ROMCALL(void, 15, 20, uint32_t base, uint8_t addr)
#define EthernetPHYPowerOff _ROMCALL(void, 15, 21, uint32_t base)
#define EthernetPHYPowerOn _ROMCALL(void, 15, 22, uint32_t base)

/* USB functions */
#define USBIntStatus _ROMCALL(uint32_t, 16, 0, uint32_t base)
#define USBDevAddrGet _ROMCALL(uint32_t, 16, 1, uint32_t base)
#define USBDevAddrSet _ROMCALL(void, 16, 2, uint32_t base, uint32_t address)
#define USBDevConnect _ROMCALL(void, 16, 3, uint32_t base)
#define USBDevDisconnect _ROMCALL(void, 16, 4, uint32_t base)
#define USBDevEndpointConfigSet _ROMCALL(void, 16, 5, uint32_t base, uint32_t endpoint, uint32_t maxPacketSize, uint32_t flags)
#define USBDevEndpointDataAck _ROMCALL(void, 16, 6, uint32_t base, uint32_t endpoint, bool isLastPacket)
#define USBDevEndpointStall _ROMCALL(void, 16, 7, uint32_t base, uint32_t endpoint, uint32_t flags)
#define USBDevEndpointStallClear _ROMCALL(void, 16, 8, uint32_t base, uint32_t endpoint, uint32_t flags)
#define USBDevEndpointStatusClear _ROMCALL(void, 16, 9, uint32_t base, uint32_t endpoint, uint32_t flags)
#define USBEndpointDataGet _ROMCALL(long, 16, 10, uint32_t base, uint32_t endpoint, uint8_t *data, uint32_t *size)
#define USBEndpointDataPut _ROMCALL(long, 16, 11, uint32_t base, uint32_t endpoint, uint8_t *data, uint32_t size)
#define USBEndpointDataSend _ROMCALL(long, 16, 12, uint32_t base, uint32_t endpoint, uint32_t transType)
#define USBEndpointDataToggleClear _ROMCALL(void, 16, 13, uint32_t base, uint32_t endpoint, uint32_t flags)
#define USBEndpointStatus _ROMCALL(uint32_t, 16, 14, uint32_t base, uint32_t endpoint)
#define USBFIFOAddrGet _ROMCALL(uint32_t, 16, 15, uint32_t base, uint32_t endpoint)
#define USBFIFOConfigGet _ROMCALL(void, 16, 16, uint32_t base, uint32_t endpoint, uint32_t *addr, uint32_t *size, uint32_t flags)
#define USBFIFOConfigSet _ROMCALL(void, 16, 17, uint32_t base, uint32_t endpoint, uint32_t addr, uint32_t size, uint32_t flags)
#define USBFIFOFlush _ROMCALL(void, 16, 18, uint32_t base, uint32_t endpoint, uint32_t flags)
#define USBFrameNumberGet _ROMCALL(uint32_t, 16, 19, uint32_t base)
#define USBHostAddrGet _ROMCALL(uint32_t, 16, 20, uint32_t base, uint32_t endpoint, uint32_t flags)
#define USBHostAddrSet _ROMCALL(void, 16, 21, uint32_t base, uint32_t endpoint, uint32_t addr, uint32_t flags)
#define USBHostEndpointConfig _ROMCALL(void, 16, 22, uint32_t base, uint32_t endpoint, uint32_t maxPacketSize, uint32_t nakPollInterval, uint32_t targetEndpoint, uint32_t flags)
#define USBHostEndpointDataAck _ROMCALL(void, 16, 23, uint32_t base, uint32_t endpoint)
#define USBHostEndpointDataToggle _ROMCALL(void, 16, 24, uint32_t base, uint32_t endpoint, bool dataToggle, uint32_t flags)
#define USBHostEndpointStatusClear _ROMCALL(void, 16, 25, uint32_t base, uint32_t endpoint, uint32_t flags)
#define USBHostHubAddrGet _ROMCALL(uint32_t, 16, 26, uint32_t base, uint32_t endpoint, uint32_t flags)
#define USBHostHubAddrSet _ROMCALL(void, 16, 27, uint32_t base, uint32_t endpoint, uint32_t addr, uint32_t flags)
#define USBHostPwrDisable _ROMCALL(void, 16, 28, uint32_t base)
#define USBHostPwrEnable _ROMCALL(void, 16, 29, uint32_t base)
#define USBHostPwrConfig _ROMCALL(void, 16, 30, uint32_t base, uint32_t flags)
#define USBHostPwrFaultDisable _ROMCALL(void, 16, 31, uint32_t base)
#define USBHostPwrFaultEnable _ROMCALL(void, 16, 32, uint32_t base)
#define USBHostRequestIN _ROMCALL(void, 16, 33, uint32_t base, uint32_t endpoint)
#define USBHostRequestStatus _ROMCALL(void, 16, 34, uint32_t base)
#define USBHostReset _ROMCALL(void, 16, 35, uint32_t base, bool start)
#define USBHostResume _ROMCALL(void, 16, 36, uint32_t base, bool start)
#define USBHostSpeedGet _ROMCALL(uint32_t, 16, 37, uint32_t base)
#define USBHostSuspend _ROMCALL(void, 16, 38, uint32_t base)
#define USBIntDisable _ROMCALL(void, 16, 39, uint32_t base, uint32_t flags)
#define USBIntEnable _ROMCALL(void, 16, 40, uint32_t base, uint32_t flags)
#define USBDevEndpointConfigGet _ROMCALL(void, 16, 41, uint32_t base, uint32_t endpoint, uint32_t *maxPacketSize, uint32_t *flags)
#define USBEndpointDMAEnable _ROMCALL(void, 16, 42, uint32_t base, uint32_t endpoint, uint32_t flags)
#define USBEndpointDMADisable _ROMCALL(void, 16, 43, uint32_t base, uint32_t endpoint, uint32_t flags)
#define USBEndpointDataAvail _ROMCALL(uint32_t, 16, 44, uint32_t base, uint32_t endpoint)
#define USBOTGHostRequest _ROMCALL(void, 16, 45, uint32_t base, bool hnp)
#define USBModeGet _ROMCALL(uint32_t, 16, 46, uint32_t base)
#define USBEndpointDMAChannel _ROMCALL(void, 16, 47, uint32_t base, uint32_t endpoint, uint32_t channel)
#define USBIntDisableControl _ROMCALL(void, 16, 48, uint32_t base, uint32_t flags)
#define USBIntEnableControl _ROMCALL(void, 16, 49, uint32_t base, uint32_t flags)
#define USBIntStatusControl _ROMCALL(uint32_t, 16, 50, uint32_t base)
#define USBIntDisableEndpoint _ROMCALL(void, 16, 51, uint32_t base, uint32_t flags)
#define USBIntEnableEndpoint _ROMCALL(void, 16, 52, uint32_t base, uint32_t flags)
#define USBIntStatusEndpoint _ROMCALL(uint32_t, 16, 53, uint32_t base)
#define USBHostMode _ROMCALL(void, 16, 54, uint32_t base)
#define USBDevMode _ROMCALL(void, 16, 55, uint32_t base)
#define USBPHYPowerOff _ROMCALL(void, 16, 56, uint32_t base)
#define USBPHYPowerOn _ROMCALL(void, 16, 57, uint32_t base)
#define USBUpdateUSB _ROMCALL(void, 16, 58, uint8_t *descriptorInfo)
#define USBOTGMode _ROMCALL(void, 16, 59, uint32_t base)

/* UDMA functions */
#define UDMAChannelTransferSet _ROMCALL(void, 17, 0, uint32_t channelStructIndex, uint32_t mode, void *srcAddr, void *dstAddr, uint32_t transferSize)
#define UDMAEnable _ROMCALL(void, 17, 1, void)
#define UDMADisable _ROMCALL(void, 17, 2, void)
#define UDMAErrorStatusGet _ROMCALL(uint32_t, 17, 3, void)
#define UDMAErrorStatusClear _ROMCALL(void, 17, 4, void)
#define UDMAChannelEnable _ROMCALL(void, 17, 5, uint32_t channelNum)
#define UDMAChannelDisable _ROMCALL(void, 17, 6, uint32_t channelNum)
#define UDMAChannelIsEnabled _ROMCALL(bool, 17, 7, uint32_t channelNum)
#define UDMAControlBaseSet _ROMCALL(void, 17, 8, void *controlTable)
#define UDMAControlBaseGet _ROMCALL(void *, 17, 9, void)
#define UDMAChannelRequest _ROMCALL(void, 17, 10, uint32_t channelNum)
#define UDMAChannelAttributeEnable _ROMCALL(void, 17, 11, uint32_t channelNum, uint32_t attr)
#define UDMAChannelAttributeDisable _ROMCALL(void, 17, 12, uint32_t channelNum, uint32_t attr)
#define UDMAChannelAttributeGet _ROMCALL(uint32_t, 17, 13, uint32_t channelNum)
#define UDMAChannelControlSet _ROMCALL(void, 17, 14, uint32_t channelStructIndex, uint32_t control)
#define UDMAChannelSizeGet _ROMCALL(uint32_t, 17, 15, uint32_t channelStructIndex)
#define UDMAChannelModeGet _ROMCALL(uint32_t, 17, 16, uint32_t channelStructIndex)
#define UDMAChannelSelectSecondary _ROMCALL(void, 17, 17, uint32_t secPeriphs)
#define UDMAChannelSelectDefault _ROMCALL(void, 17, 18, uint32_t defPeriphs)
#define UDMAIntStatus _ROMCALL(uint32_t, 17, 19, void)
#define UDMAIntClear _ROMCALL(void, 17, 20, uint32_t chanMask)
#define UDMAControlAlternateBaseGet _ROMCALL(void *, 17, 21, void)
#define UDMAChannelScatterGatherSet _ROMCALL(void, 17, 22, uint32_t channelNum, unsigned taskCount, void *taskList, uint32_t isPeriphSG)
#define UDMAChannelAssign _ROMCALL(void, 17, 23, uint32_t mapping)

/* CAN functions */
#define CANIntClear _ROMCALL(void, 18, 0, uint32_t base, uint32_t intClr)
#define CANInit _ROMCALL(void, 18, 1, uint32_t base)
#define CANEnable _ROMCALL(void, 18, 2, uint32_t base)
#define CANDisable _ROMCALL(void, 18, 3, uint32_t base)
#define CANBitTimingSet _ROMCALL(void, 18, 4, uint32_t base, tCANBitClkParms *clkParms)
#define CANBitTimingGet _ROMCALL(void, 18, 5, uint32_t base, tCANBitClkParms *clkParms)
#define CANMessageSet _ROMCALL(void, 18, 6, uint32_t base, uint32_t objID, tCANMsgObject *msgObject, tMsgObjType eMsgType)
#define CANMessageGet _ROMCALL(void, 18, 7, uint32_t base, uint32_t objID, tCANMsgObject *msgObject, bool clrPendingInt)
#define CANStatusGet _ROMCALL(uint32_t, 18, 8, uint32_t base, tCANStsReg eStatusReg)
#define CANMessageClear _ROMCALL(void, 18, 9, uint32_t base, uint32_t objID)
#define CANIntEnable _ROMCALL(void, 18, 10, uint32_t base, uint32_t flags)
#define CANIntDisable _ROMCALL(void, 18, 11, uint32_t base, uint32_t flags)
#define CANIntStatus _ROMCALL(uint32_t, 18, 12, uint32_t base, tCANIntStsReg eIntStsReg)
#define CANRetryGet _ROMCALL(bool, 18, 13, uint32_t base)
#define CANRetrySet _ROMCALL(void, 18, 14, uint32_t base, bool autoRetry)
#define CANErrCntrGet _ROMCALL(bool, 18, 15, uint32_t base, uint32_t *rxCount, uint32_t *txCount)
#define CANBitRateSet _ROMCALL(uint32_t, 18, 16, uint32_t base, uint32_t sourceClock, uint32_t bitRate)

/* Hibernate functions */
#define HibernateIntClear _ROMCALL(void, 19, 0, uint32_t flags)
#define HibernateEnableExpClk _ROMCALL(void, 19, 1, uint32_t hibClk)
#define HibernateDisable _ROMCALL(void, 19, 2, void)
#define HibernateClockSelect _ROMCALL(void, 19, 3, uint32_t clockInput)
#define HibernateRTCEnable _ROMCALL(void, 19, 4, void)
#define HibernateRTCDisable _ROMCALL(void, 19, 5, void)
#define HibernateWakeSet _ROMCALL(void, 19, 6, uint32_t wakeFlags)
#define HibernateWakeGet _ROMCALL(uint32_t, 19, 7, void)
#define HibernateLowBatSet _ROMCALL(void, 19, 8, uint32_t lowBatFlags)
#define HibernateLowBatGet _ROMCALL(uint32_t, 19, 9, void)
#define HibernateRTCSet _ROMCALL(void, 19, 10, uint32_t rtcValue)
#define HibernateRTCGet _ROMCALL(uint32_t, 19, 11, void)
#define HibernateRTCMatch0Set _ROMCALL(void, 19, 12, uint32_t match)
#define HibernateRTCMatch0Get _ROMCALL(uint32_t, 19, 13, void)
#define HibernateRTCMatch1Set _ROMCALL(void, 19, 14, uint32_t match)
#define HibernateRTCMatch1Get _ROMCALL(uint32_t, 19, 15, void)
#define HibernateRTCTrimSet _ROMCALL(void, 19, 16, uint32_t trim)
#define HibernateRTCTrimGet _ROMCALL(uint32_t, 19, 17, void)
#define HibernateDataSet _ROMCALL(void, 19, 18, uint32_t *data, uint32_t count)
#define HibernateDataGet _ROMCALL(void, 19, 19, uint32_t *data, uint32_t count)
#define HibernateRequest _ROMCALL(void, 19, 20, void)
#define HibernateIntEnable _ROMCALL(void, 19, 21, uint32_t flags)
#define HibernateIntDisable _ROMCALL(void, 19, 22, uint32_t flags)
#define HibernateIntStatus _ROMCALL(uint32_t, 19, 23, bool masked)
#define HibernateIsActive _ROMCALL(uint32_t, 19, 24, void)
#define HibernateRTCSSMatch0Set _ROMCALL(void, 19, 25, uint32_t match)
#define HibernateRTCSSMatch0Get _ROMCALL(uint32_t, 19, 26, void)
#define HibernateRTCSSGet _ROMCALL(uint32_t, 19, 27, void)
#define HibernateClockConfig _ROMCALL(void, 19, 28, uint32_t config)
#define HibernateBatCheckStart _ROMCALL(void, 19, 29, void)
#define HibernateBatCheckDone _ROMCALL(uint32_t, 19, 30, void)

/* MPU functions */
#define MPUEnable _ROMCALL(void, 20, 0, uint32_t mpuConfig)
#define MPUDisable _ROMCALL(void, 20, 1, void)
#define MPURegionCountGet _ROMCALL(uint32_t, 20, 2, void)
#define MPURegionEnable _ROMCALL(void, 20, 3, uint32_t region)
#define MPURegionDisable _ROMCALL(void, 20, 4, uint32_t region)
#define MPURegionSet _ROMCALL(void, 20, 5, uint32_t region, uint32_t addr, uint32_t flags)
#define MPURegionGet _ROMCALL(void, 20, 6, uint32_t region, uint32_t *addr, uint32_t *flags)

/* SW functions */
#define SWCrc16Array _ROMCALL(uint16_t, 21, 1, uint32_t wordLen, const uint32_t *data)
#define SWCrc16Array3 _ROMCALL(void, 21, 2, uint32_t wordLen, const uint32_t *data, uint16_t *crc3)
#define SWCrc16 _ROMCALL(uint16_t, 21, 3, uint16_t crc, const uint8_t *data, uint32_t count)
#define SWCrc8CCITT _ROMCALL(uint8_t, 21, 4, uint8_t crc, const uint8_t *data, uint32_t count)

/* I2S functions */
#define I2SIntStatus _ROMCALL(uint32_t, 22, 0, uint32_t base, bool masked)
#define I2STxEnable _ROMCALL(void, 22, 1, uint32_t base)
#define I2STxDisable _ROMCALL(void, 22, 2, uint32_t base)
#define I2STxDataPut _ROMCALL(void, 22, 3, uint32_t base, uint32_t data)
#define I2STxDataPutNonBlocking _ROMCALL(long, 22, 4, uint32_t base, uint32_t data)
#define I2STxConfigSet _ROMCALL(void, 22, 5, uint32_t base, uint32_t config)
#define I2STxFIFOLimitSet _ROMCALL(void, 22, 6, uint32_t base, uint32_t level)
#define I2STxFIFOLimitGet _ROMCALL(uint32_t, 22, 7, uint32_t base)
#define I2STxFIFOLevelGet _ROMCALL(uint32_t, 22, 8, uint32_t base)
#define I2SRxEnable _ROMCALL(void, 22, 9, uint32_t base)
#define I2SRxDisable _ROMCALL(void, 22, 10, uint32_t base)
#define I2SRxDataGet _ROMCALL(void, 22, 11, uint32_t base, uint32_t *data)
#define I2SRxDataGetNonBlocking _ROMCALL(long, 22, 12, uint32_t base, uint32_t *data)
#define I2SRxConfigSet _ROMCALL(void, 22, 13, uint32_t base, uint32_t config)
#define I2SRxFIFOLimitSet _ROMCALL(void, 22, 14, uint32_t base, uint32_t level)
#define I2SRxFIFOLimitGet _ROMCALL(uint32_t, 22, 15, uint32_t base)
#define I2SRxFIFOLevelGet _ROMCALL(uint32_t, 22, 16, uint32_t base)
#define I2STxRxEnable _ROMCALL(void, 22, 17, uint32_t base)
#define I2STxRxDisable _ROMCALL(void, 22, 18, uint32_t base)
#define I2STxRxConfigSet _ROMCALL(void, 22, 19, uint32_t base, uint32_t config)
#define I2SMasterClockSelect _ROMCALL(void, 22, 20, uint32_t base, uint32_t mclock)
#define I2SIntEnable _ROMCALL(void, 22, 21, uint32_t base, uint32_t flags)
#define I2SIntDisable _ROMCALL(void, 22, 22, uint32_t base, uint32_t flags)
#define I2SIntClear _ROMCALL(void, 22, 23, uint32_t base, uint32_t flags)

/* EPI functions */
#define EPIIntStatus _ROMCALL(uint32_t, 23, 0, uint32_t base, bool masked)
#define EPIModeSet _ROMCALL(void, 23, 1, uint32_t base, uint32_t mode)
#define EPIDividerSet _ROMCALL(void, 23, 2, uint32_t base, uint32_t divider)
#define EPIConfigSDRAMSet _ROMCALL(void, 23, 3, uint32_t base, uint32_t config, uint32_t refresh)
#define EPIConfigGPModeSet _ROMCALL(void, 23, 4, uint32_t base, uint32_t config, uint32_t frameCount, uint32_t maxWait)
#define EPIConfigHB8Set _ROMCALL(void, 23, 5, uint32_t base, uint32_t config, uint32_t maxWait)
#define EPIConfigHB16Set _ROMCALL(void, 23, 6, uint32_t base, uint32_t config, uint32_t maxWait)
#define EPIAddressMapSet _ROMCALL(void, 23, 7, uint32_t base, uint32_t map)
#define EPINonBlockingReadConfigure _ROMCALL(void, 23, 8, uint32_t base, uint32_t channel, uint32_t dataSize, uint32_t address)
#define EPINonBlockingReadStart _ROMCALL(void, 23, 9, uint32_t base, uint32_t channel, uint32_t count)
#define EPINonBlockingReadStop _ROMCALL(void, 23, 10, uint32_t base, uint32_t channel)
#define EPINonBlockingReadCount _ROMCALL(uint32_t, 23, 11, uint32_t base, uint32_t channel)
#define EPINonBlockingReadAvail _ROMCALL(uint32_t, 23, 12, uint32_t base)
#define EPINonBlockingReadGet32 _ROMCALL(uint32_t, 23, 13, uint32_t base, uint32_t count, uint32_t *buf)
#define EPINonBlockingReadGet16 _ROMCALL(uint32_t, 23, 14, uint32_t base, uint32_t count, uint16_t *buf)
#define EPINonBlockingReadGet8 _ROMCALL(uint32_t, 23, 15, uint32_t base, uint32_t count, uint8_t *buf)
#define EPIFIFOConfig _ROMCALL(void, 23, 16, uint32_t base, uint32_t config)
#define EPIWriteFIFOCountGet _ROMCALL(uint32_t, 23, 17, uint32_t base)
#define EPIIntEnable _ROMCALL(void, 23, 18, uint32_t base, uint32_t flags)
#define EPIIntDisable _ROMCALL(void, 23, 19, uint32_t base, uint32_t flags)
#define EPIIntErrorStatus _ROMCALL(uint32_t, 23, 20, uint32_t base)
#define EPIIntErrorClear _ROMCALL(void, 23, 21, uint32_t base, uint32_t errFlags)

/* EEPROM functions */
#define EEPROMRead _ROMCALL(void, 24, 0, uint32_t *data, uint32_t address, uint32_t count)
#define EEPROMBlockCountGet _ROMCALL(uint32_t, 24, 1, void)
#define EEPROMBlockHide _ROMCALL(void, 24, 2, uint32_t block)
#define EEPROMBlockLock _ROMCALL(uint32_t, 24, 3, uint32_t block)
#define EEPROMBlockPasswordSet _ROMCALL(uint32_t, 24, 4, uint32_t block, uint32_t *password, uint32_t count)
#define EEPROMBlockProtectGet _ROMCALL(uint32_t, 24, 5, uint32_t block)
#define EEPROMBlockProtectSet _ROMCALL(uint32_t, 24, 6, uint32_t block, uint32_t protect)
#define EEPROMBlockUnlock _ROMCALL(uint32_t, 24, 7, uint32_t block, uint32_t *password, uint32_t count)
#define EEPROMIntClear _ROMCALL(void, 24, 8, uint32_t flags)
#define EEPROMIntDisable _ROMCALL(void, 24, 9, uint32_t flags)
#define EEPROMIntEnable _ROMCALL(void, 24, 10, uint32_t flags)
#define EEPROMIntStatus _ROMCALL(uint32_t, 24, 11, bool masked)
#define EEPROMMassErase _ROMCALL(uint32_t, 24, 12, void)
#define EEPROMProgram _ROMCALL(uint32_t, 24, 13, uint32_t *data, uint32_t address, uint32_t count)
#define EEPROMProgramNonBlocking _ROMCALL(uint32_t, 24, 14, uint32_t data, uint32_t address)
#define EEPROMSizeGet _ROMCALL(uint32_t, 24, 15, void)
#define EEPROMStatusGet _ROMCALL(uint32_t, 24, 16, void)
#define EEPROMInit _ROMCALL(uint32_t, 24, 17, void)

/* Fan functions */
#define FanIntClear _ROMCALL(void, 25, 0, uint32_t base, uint32_t flags)
#define FanChannelConfigAuto _ROMCALL(void, 25, 1, uint32_t base, uint32_t channel, uint32_t config)
#define FanChannelConfigManual _ROMCALL(void, 25, 2, uint32_t base, uint32_t channel, uint32_t config)
#define FanChannelDisable _ROMCALL(void, 25, 3, uint32_t base, uint32_t channel)
#define FanChannelDutyGet _ROMCALL(uint32_t, 25, 4, uint32_t base, uint32_t channel)
#define FanChannelDutySet _ROMCALL(void, 25, 5, uint32_t base, uint32_t channel, uint32_t duty)
#define FanChannelEnable _ROMCALL(void, 25, 6, uint32_t base, uint32_t channel)
#define FanChannelRPMGet _ROMCALL(uint32_t, 25, 7, uint32_t base, uint32_t channel)
#define FanChannelRPMSet _ROMCALL(void, 25, 8, uint32_t base, uint32_t channel, uint32_t rpm)
#define FanChannelStatus _ROMCALL(uint32_t, 25, 9, uint32_t base, uint32_t channel)
#define FanChannelsGet _ROMCALL(uint32_t, 25, 10, uint32_t base)
#define FanIntDisable _ROMCALL(void, 25, 11, uint32_t base, uint32_t flags)
#define FanIntEnable _ROMCALL(void, 25, 12, uint32_t base, uint32_t flags)
#define FanIntStatus _ROMCALL(uint32_t, 25, 13, uint32_t base, bool masked)

/* FPU functions */
#define FPUEnable _ROMCALL(void, 26, 0, void)
#define FPUDisable _ROMCALL(void, 26, 1, void)
#define FPUFlushToZeroModeSet _ROMCALL(void, 26, 2, uint32_t mode)
#define FPUHalfPrecisionModeSet _ROMCALL(void, 26, 3, uint32_t mode)
#define FPULazyStackingEnable _ROMCALL(void, 26, 4, void)
#define FPUNaNModeSet _ROMCALL(void, 26, 5, uint32_t mode)
#define FPURoundingModeSet _ROMCALL(void, 26, 6, uint32_t mode)
#define FPUStackingDisable _ROMCALL(void, 26, 7, void)
#define FPUStackingEnable _ROMCALL(void, 26, 8, void)

/* LPC functions */
#define LPCIntClear _ROMCALL(void, 27, 0, uint32_t base, uint32_t flags)
#define LPCByteRead _ROMCALL(uint8_t, 27, 1, uint32_t base, uint32_t offset)
#define LPCByteWrite _ROMCALL(void, 27, 2, uint32_t base, uint32_t offset, uint8_t data)
#define LPCChannelConfigCOMxSet _ROMCALL(void, 27, 3, uint32_t base, uint32_t channel, uint32_t config, uint32_t address, uint32_t offset, uint32_t comxmode)
#define LPCChannelConfigGet _ROMCALL(uint32_t, 27, 4, uint32_t base, uint32_t channel, uint32_t *address, uint32_t *offset, uint32_t *comxmode)
#define LPCChannelConfigEPSet _ROMCALL(void, 27, 5, uint32_t base, uint32_t channel, uint32_t config, uint32_t address, uint32_t offset)
#define LPCChannelConfigMBSet _ROMCALL(void, 27, 6, uint32_t base, uint32_t channel, uint32_t config, uint32_t address, uint32_t offset)
#define LPCChannelDMAConfigGet _ROMCALL(uint32_t, 27, 7, uint32_t base)
#define LPCChannelDMAConfigSet _ROMCALL(void, 27, 8, uint32_t base, uint32_t config, uint32_t mask)
#define LPCChannelDisable _ROMCALL(void, 27, 9, uint32_t base, uint32_t channel)
#define LPCChannelEnable _ROMCALL(void, 27, 10, uint32_t base, uint32_t channel)
#define LPCChannelStatusClear _ROMCALL(void, 27, 11, uint32_t base, uint32_t channel, uint32_t status)
#define LPCChannelStatusGet _ROMCALL(uint32_t, 27, 12, uint32_t base, uint32_t channel)
#define LPCChannelStatusSet _ROMCALL(void, 27, 13, uint32_t base, uint32_t channel, uint32_t status)
#define LPCCOMxIntClear _ROMCALL(void, 27, 14, uint32_t base, uint32_t flags)
#define LPCCOMxIntDisable _ROMCALL(void, 27, 15, uint32_t base, uint32_t flags)
#define LPCCOMxIntEnable _ROMCALL(void, 27, 16, uint32_t base, uint32_t flags)
#define LPCCOMxIntStatus _ROMCALL(uint32_t, 27, 17, uint32_t base, bool masked)
#define LPCConfigGet _ROMCALL(uint32_t, 27, 18, uint32_t base)
#define LPCConfigSet _ROMCALL(void, 27, 19, uint32_t base, uint32_t config)
#define LPCHalfWordRead _ROMCALL(uint16_t, 27, 20, uint32_t base, uint32_t offset)
#define LPCHalfWordWrite _ROMCALL(void, 27, 21, uint32_t base, uint32_t offset, uint16_t usData)
#define LPCIRQClear _ROMCALL(void, 27, 22, uint32_t base, uint32_t irq)
#define LPCIRQConfig _ROMCALL(void, 27, 23, uint32_t base, bool irqPulse, bool irqOnChange)
#define LPCIRQGet _ROMCALL(uint32_t, 27, 24, uint32_t base)
#define LPCIRQSend _ROMCALL(void, 27, 25, uint32_t base)
#define LPCIRQSet _ROMCALL(void, 27, 26, uint32_t base, uint32_t irq)
#define LPCIntDisable _ROMCALL(void, 27, 27, uint32_t base, uint32_t flags)
#define LPCIntEnable _ROMCALL(void, 27, 28, uint32_t base, uint32_t flags)
#define LPCIntStatus _ROMCALL(uint32_t, 27, 29, uint32_t base, bool masked)
#define LPCSCIAssert _ROMCALL(void, 27, 30, uint32_t base, uint32_t count)
#define LPCStatusGet _ROMCALL(uint32_t, 27, 31, uint32_t base, uint32_t *count, uint32_t *poolSize)
#define LPCWordRead _ROMCALL(uint32_t, 27, 32, uint32_t base, uint32_t offset)
#define LPCWordWrite _ROMCALL(void, 27, 33, uint32_t base, uint32_t offset, uint32_t data)
#define LPCChannelPoolAddressGet _ROMCALL(uint32_t, 27, 34, uint32_t base, uint32_t channel)
#define LPCStatusBlockAddressGet _ROMCALL(unsigned, 27, 35, uint32_t base)
#define LPCStatusBlockAddressSet _ROMCALL(void, 27, 36, uint32_t base, uint32_t address, bool enabled)

/* PECI functions */
#define PECIIntClear _ROMCALL(void, 28, 0, uint32_t base, uint32_t flags)
#define PECIAdvCmdSend _ROMCALL(void, 28, 1, uint32_t base, uint8_t cmd, uint8_t hidRe, uint8_t domain, uint8_t procAdd, uint32_t arg, uint8_t size, uint32_t data0, uint32_t data1)
#define PECIAdvCmdSendNonBlocking _ROMCALL(uint32_t, 28, 2, uint32_t base, uint8_t cmd, uint8_t hidRe, uint8_t domain, uint8_t procAdd, uint32_t arg, uint8_t size, uint32_t data0, uint32_t data1)
#define PECIAdvCmdStatusGet _ROMCALL(uint32_t, 28, 3, uint32_t base, uint32_t *data0, uint32_t *data1)
#define PECIConfigGet _ROMCALL(void, 28, 4, uint32_t base, uint32_t clk, uint32_t *baud, uint32_t *poll, uint32_t *offset, uint32_t *retry)
#define PECIConfigSet _ROMCALL(void, 28, 5, uint32_t base, uint32_t clk, uint32_t baud, uint32_t poll, uint32_t offset, uint32_t retry)
#define PECIDomainMaxReadClear _ROMCALL(void, 28, 6, uint32_t base, uint32_t domain)
#define PECIDomainValueClear _ROMCALL(void, 28, 7, uint32_t base, uint32_t domain)
#define PECIDomainConfigGet _ROMCALL(void, 28, 8, uint32_t base, uint32_t domain, uint32_t *high, uint32_t *low)
#define PECIDomainConfigSet _ROMCALL(void, 28, 9, uint32_t base, uint32_t domain, uint32_t high, uint32_t low)
#define PECIDomainDisable _ROMCALL(void, 28, 10, uint32_t base, uint32_t domain)
#define PECIDomainEnable _ROMCALL(void, 28, 11, uint32_t base, uint32_t domain)
#define PECIDomainMaxReadGet _ROMCALL(uint32_t, 28, 12, uint32_t base, uint32_t domain)
#define PECIDomainValueGet _ROMCALL(uint32_t, 28, 13, uint32_t base, uint32_t domain)
#define PECIIntDisable _ROMCALL(void, 28, 14, uint32_t base, uint32_t flags)
#define PECIIntEnable _ROMCALL(void, 28, 15, uint32_t base, uint32_t flags, uint32_t mode)
#define PECIIntStatus _ROMCALL(uint32_t, 28, 16, uint32_t base, bool masked)
#define PECIBypassEnable _ROMCALL(void, 28, 17, uint32_t base)
#define PECIBypassDisable _ROMCALL(void, 28, 18, uint32_t base)

/* SMBus functions */
#define SMBusMasterIntProcess _ROMCALL(tSMBusStatus, 29, 0, tSMBus *pSMBus)
#define SMBusARPDisable _ROMCALL(void, 29, 1, tSMBus *pSMBus)
#define SMBusARPEnable _ROMCALL(void, 29, 2, tSMBus *pSMBus)
#define SMBusARPUDIDPacketDecode _ROMCALL(void, 29, 3, tSMBusUDID *udid, uint8_t *address, uint8_t *data)
#define SMBusARPUDIDPacketEncode _ROMCALL(void, 29, 4, tSMBusUDID *udid, uint8_t address, uint8_t *data)
#define SMBusMasterARPAssignAddress _ROMCALL(tSMBusStatus, 29, 5, tSMBus *pSMBus, uint8_t *data)
#define SMBusMasterARPGetUDIDDir _ROMCALL(tSMBusStatus, 29, 6, tSMBus *pSMBus, uint8_t targetAddress, uint8_t *data)
#define SMBusMasterARPGetUDIDGen _ROMCALL(tSMBusStatus, 29, 7, tSMBus *pSMBus, uint8_t *data)
#define SMBusMasterARPNotifyMaster _ROMCALL(tSMBusStatus, 29, 8, tSMBus *pSMBus, uint8_t *data)
#define SMBusMasterARPPrepareToARP _ROMCALL(tSMBusStatus, 29, 9, tSMBus *pSMBus)
#define SMBusMasterARPResetDeviceDir _ROMCALL(tSMBusStatus, 29, 10, tSMBus *pSMBus, uint8_t targetAddress)
#define SMBusMasterARPResetDeviceGen _ROMCALL(tSMBusStatus, 29, 11, tSMBus *pSMBus)
#define SMBusMasterBlockProcessCall _ROMCALL(tSMBusStatus, 29, 12, tSMBus *pSMBus, uint8_t targetAddress, uint8_t command, uint8_t *txData, uint8_t txSize, uint8_t *rxData)
#define SMBusMasterBlockRead _ROMCALL(tSMBusStatus, 29, 13, tSMBus *pSMBus, uint8_t targetAddress, uint8_t command, uint8_t *data)
#define SMBusMasterBlockWrite _ROMCALL(tSMBusStatus, 29, 14, tSMBus *pSMBus, uint8_t targetAddress, uint8_t command, uint8_t *data, uint8_t size)
#define SMBusMasterByteReceive _ROMCALL(tSMBusStatus, 29, 15, tSMBus *pSMBus, uint8_t targetAddress, uint8_t *data)
#define SMBusMasterByteSend _ROMCALL(tSMBusStatus, 29, 16, tSMBus *pSMBus, uint8_t targetAddress, uint8_t data)
#define SMBusMasterByteWordRead _ROMCALL(tSMBusStatus, 29, 17, tSMBus *pSMBus, uint8_t targetAddress, uint8_t command, uint8_t *data, uint8_t size)
#define SMBusMasterByteWordWrite _ROMCALL(tSMBusStatus, 29, 18, tSMBus *pSMBus, uint8_t targetAddress, uint8_t command, uint8_t *data, uint8_t size)
#define SMBusMasterHostNotify _ROMCALL(tSMBusStatus, 29, 19, tSMBus *pSMBus, uint8_t ownSlaveAddress, uint8_t *data)
#define SMBusMasterI2CRead _ROMCALL(tSMBusStatus, 29, 20, tSMBus *pSMBus, uint8_t targetAddress, uint8_t *data, uint8_t size)
#define SMBusMasterI2CWrite _ROMCALL(tSMBusStatus, 29, 21, tSMBus *pSMBus, uint8_t targetAddress, uint8_t *data, uint8_t size)
#define SMBusMasterI2CWriteRead _ROMCALL(tSMBusStatus, 29, 22, tSMBus *pSMBus, uint8_t targetAddress, uint8_t *txData, uint8_t txSize, uint8_t *rxData, uint8_t rxSize)
#define SMBusMasterInit _ROMCALL(void, 29, 23, tSMBus *pSMBus, uint32_t i2cBase, uint32_t smbusClock)
#define SMBusMasterIntEnable _ROMCALL(void, 29, 24, tSMBus *pSMBus)
#define SMBusMasterProcessCall _ROMCALL(tSMBusStatus, 29, 25, tSMBus *pSMBus, uint8_t targetAddress, uint8_t command, uint8_t *txData, uint8_t *rxData)
#define SMBusMasterQuickCommand _ROMCALL(tSMBusStatus, 29, 26, tSMBus *pSMBus, uint8_t targetAddress, bool data)
#define SMBusPECDisable _ROMCALL(void, 29, 27, tSMBus *pSMBus)
#define SMBusPECEnable _ROMCALL(void, 29, 28, tSMBus *pSMBus)
#define SMBusRxPacketSizeGet _ROMCALL(uint8_t, 29, 29, tSMBus *pSMBus)
#define SMBusSlaveACKSend _ROMCALL(void, 29, 30, tSMBus *pSMBus, bool ack)
#define SMBusSlaveAddressSet _ROMCALL(void, 29, 31, tSMBus *pSMBus, uint8_t addressNum, uint8_t slaveAddress)
#define SMBusSlaveARPFlagARGet _ROMCALL(bool, 29, 32, tSMBus *pSMBus)
#define SMBusSlaveARPFlagARSet _ROMCALL(void, 29, 33, tSMBus *pSMBus, bool value)
#define SMBusSlaveARPFlagAVGet _ROMCALL(bool, 29, 34, tSMBus *pSMBus)
#define SMBusSlaveARPFlagAVSet _ROMCALL(void, 29, 35, tSMBus *pSMBus, bool value)
#define SMBusSlaveBlockTransferDisable _ROMCALL(void, 29, 36, tSMBus *pSMBus)
#define SMBusSlaveBlockTransferEnable _ROMCALL(void, 29, 37, tSMBus *pSMBus)
#define SMBusSlaveCommandGet _ROMCALL(uint8_t, 29, 38, tSMBus *pSMBus)
#define SMBusSlaveI2CDisable _ROMCALL(void, 29, 39, tSMBus *pSMBus)
#define SMBusSlaveI2CEnable _ROMCALL(void, 29, 40, tSMBus *pSMBus)
#define SMBusSlaveInit _ROMCALL(void, 29, 41, tSMBus *pSMBus, uint32_t i2cBase)
#define SMBusSlaveIntAddressGet _ROMCALL(tSMBusStatus, 29, 42, tSMBus *pSMBus)
#define SMBusSlaveIntEnable _ROMCALL(void, 29, 43, tSMBus *pSMBus)
#define SMBusSlaveIntProcess _ROMCALL(tSMBusStatus, 29, 44, tSMBus *pSMBus)
#define SMBusSlaveManualACKDisable _ROMCALL(void, 29, 45, tSMBus *pSMBus)
#define SMBusSlaveManualACKEnable _ROMCALL(void, 29, 46, tSMBus *pSMBus)
#define SMBusSlaveManualACKStatusGet _ROMCALL(bool, 29, 47, tSMBus *pSMBus)
#define SMBusSlaveProcessCallDisable _ROMCALL(void, 29, 48, tSMBus *pSMBus)
#define SMBusSlaveProcessCallEnable _ROMCALL(void, 29, 49, tSMBus *pSMBus)
#define SMBusSlaveRxBufferSet _ROMCALL(void, 29, 50, tSMBus *pSMBus, uint8_t *data, uint8_t size)
#define SMBusSlaveTransferInit _ROMCALL(void, 29, 51, tSMBus *pSMBus)
#define SMBusSlaveTxBufferSet _ROMCALL(void, 29, 52, tSMBus *pSMBus, uint8_t *data, uint8_t size)
#define SMBusSlaveUDIDSet _ROMCALL(void, 29, 53, tSMBus *pSMBus, tSMBusUDID *udid)
#define SMBusStatusGet _ROMCALL(tSMBusStatus, 29, 54, tSMBus *pSMBus)
#define SMBusSlaveDataSend _ROMCALL(tSMBusStatus, 29, 55, tSMBus *pSMBus)

/* SysExc functions */
#define SysExcIntStatus _ROMCALL(uint32_t, 30, 0, bool masked)
#define SysExcIntClear _ROMCALL(void, 30, 1, uint32_t flags)
#define SysExcIntDisable _ROMCALL(void, 30, 2, uint32_t flags)
#define SysExcIntEnable _ROMCALL(void, 30, 3, uint32_t flags)

#endif // _ROMLIB_H
